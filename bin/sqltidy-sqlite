#!/usr/bin/env perl
use strict;
use warnings;
use feature 'state';
use OptArgs2;

arg db => (
    isa      => 'Str',
    required => 1,
    comment  => 'SQLite database to tidy',
);

opt help => (
    isa     => 'Flag',
    ishelp  => 1,
    alias   => 'h',
    comment => 'print full help message and exit',
);

opt indent => (
    isa          => 'Int',
    isa_name     => 'COUNT',
    alias        => 'i',
    default      => 4,
    comment      => 'number of spaces to indent',
    show_default => 1,
);

opt inplace => (
    isa     => 'Flag',
    comment => '*WARNING* update the database schema *WARNING*',
);

opt extension => (
    isa     => 'ArrayRef',
    alias   => 'e',
    default => sub { [] },
    comment => 'extension(s) to load when testing inplace changes',
);

my $opts = optargs;
die "database not found: $opts->{db}\n" unless -e $opts->{db};

require DBIx::ThinSQL;
DBIx::ThinSQL->import('case');
my $db = DBIx::ThinSQL->connect( 'dbi:SQLite:dbname=' . $opts->{db} );

require SQL::Tidy;
$db->sqlite_create_function(
    'sqltidy',
    1,
    sub {
        defined $_[0]
          ? SQL::Tidy::sqltidy( $_[0], indent => $opts->{indent} )
          : undef;
    }
);

if ( $opts->{inplace} ) {

    $db->txn( sub {
        $db->xdo(
            create_temporary_table => '_master',
            as_select              => [
                'tbl_name', 'type', 'name', 'rootpage', 'sqltidy(sql) AS sql',
            ],
            from     => 'sqlite_master',
            order_by => [
                'tbl_name',
                case (    # q{instr('table,index,view,trigger',type)}
                    when => { type => 'table' },
                    then => 1,
                    when => { type => 'index' },
                    then => 2,
                    when => { type => 'view' },
                    then => 3,
                    when => { type => 'trigger' },
                    then => 4,
                    else => 9,
                ),
                'name',
            ],
        );

        my $sth = $db->xsth(
            select   => '*',
            from     => 'temp._master',
            where    => { 'name !like' => 'sqlite_autoindex_%' },
            order_by => 'rowid',
        );

        my $memdb = DBIx::ThinSQL->connect('dbi:SQLite:dbname=:memory:');
        foreach my $ext ( @{ $opts->{extension} } ) {
            state $enable = $memdb->sqlite_enable_load_extension(1);
            $memdb->do( 'SELECT load_extension(?)', undef, $ext );
        }

        $memdb->txn( sub {
            while ( my $ref = $sth->hashref ) {

                # Some things (e.g. auto_indexes and extension tables)
                # can be ignored
                next unless defined $ref->{sql};
                next
                  if $memdb->xval(
                    select => 1,
                    from   => 'sqlite_master',
                    where  => {
                        tbl_name => $ref->{tbl_name},
                        type     => $ref->{type},
                        name     => $ref->{name},
                    },
                  );

                $memdb->do( $ref->{sql} );
            }
        } );

        $memdb->disconnect;

        $db->do('PRAGMA writable_schema=ON');
        $db->do('DELETE FROM sqlite_master');

        $db->xdo(
            insert_into =>
              [ 'sqlite_master', qw/tbl_name type name rootpage sql/ ],
            select   => [ qw/tbl_name type name rootpage sql/, ],
            from     => 'temp._master',
            order_by => 'rowid',
        );

        $db->do('DROP TABLE temp._master');
        $db->do('PRAGMA writable_schema=OFF');
    } );

}
else {
    my $sth = $db->xsth(
        select   => 'sqltidy(sql)',
        from     => 'sqlite_master',
        where    => { 'sql!' => undef },
        order_by => [
            'tbl_name',
            case (    # q{instr('table,index,view,trigger',type)}
                when => { type => 'table' },
                then => 1,
                when => { type => 'index' },
                then => 2,
                when => { type => 'view' },
                then => 3,
                when => { type => 'trigger' },
                then => 4,
                else => 9,
            ),
            'name',
        ],
    );

    require SQL::Tidy::Pager;
    local $ENV{'LESS'} = '-FXeR';
    my $pager = SQL::Tidy::Pager->new;
    $pager->open;

    while ( my $sql = $sth->val ) {
        print $sql, ";\n\n";
    }
}

1;

__END__

=head1 NAME

sqltidy-sqlite - format and indent an SQLite database schema

=head1 SYNOPSIS

    sqltidy-sqlite DB [OPTIONS...]

=head1 DESCRIPTION

The B<sqltidy-sqlite> tool prints to I<stdout> the SQL schema of the
SQLite database I<DB> in a consistent, aesthetically pleasing way. It
can optionally write the tidied schema back to the database.

This does I<not> replace the SQLite `.schema` command, which includes
additional statements in its output to re-create the database
accurately.

=head1 ARGUMENTS & OPTIONS

=over

=item DB

The filename of the SQLite database to tidy.

=item --help

Print a help message and exit.

=item --inplace

Instead of printing the tidied SQL, actually sort and tidy the schema
directly in I<DB>.  This has the effect of making the SQLite C<.dump>
and C<.schema> commands produce a consistent output.

B<Note:> this mucks about with the C<sqlite_master> table and can
potentially corrupt your database! It is not recommend unless you have
a known good backup of I<DB>. This software comes with NO WARRANTY!

=back

=head1 EXIT VALUE

This command exists with a value of 0 on success.

=head1 SEE ALSO

L<SQL::Tidy>

=head1 AUTHOR

Mark Lawrence E<lt>nomad@null.netE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright 2020 Mark Lawrence <nomad@null.net>

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 3 of the License, or (at your
option) any later version.

