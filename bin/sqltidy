#!/usr/bin/perl
use strict;
use warnings;
use FindBin '$Bin';
use lib "$Bin/../lib";
use OptArgs2;

our $VERSION = '0.2';

cmd 'App::sqltidy' => (
    comment => 'SQL formatter',
    optargs => sub {
        arg file => (
            isa     => 'Str',
            comment => 'file to tidy ("-" to force stdin)',
        );

        opt help => (
            isa     => 'Flag',
            alias   => 'h',
            ishelp  => 1,
            comment => 'print full usage and exit',
        );

        opt debug => (
            isa     => 'Flag',
            alias   => 'd',
            comment => 'show parse tree in output',
        );

        #        opt double_escape => (
        #            isa     => 'Flag',
        #            comment => 'x',
        #        );

        opt indent => (
            isa          => 'Int',
            isa_name     => 'COUNT',
            alias        => 'i',
            default      => 4,
            comment      => 'number of spaces to indent',
            show_default => 1,
        );

        opt inplace => (
            isa     => 'Flag',
            alias   => 'p',
            comment => 'overwrite FILE in place',
        );

        opt backup => (
            isa     => 'Bool',
            default => 1,
            comment => 'do not backup when --inplace is used',
        );

        #        opt no_preserve_leading => (
        #            isa     => 'Flag',
        #            alias   => 'P',
        #            comment => 'x',
        #        );
        #
        #        opt editor_mode => (
        #            isa     => 'Bool',
        #            comment => 'x',
        #        );

        opt sql => (
            isa     => 'Str',
            alias   => 's',
            comment => 'input SQL',
            hidden  => 1,
        );
    },
);

my ( undef, $opts ) = class_optargs('App::sqltidy');

if ( exists $opts->{file} ) {
    if ( $opts->{file} eq '-' ) {
        local $/ = undef;
        $opts->{sql} = <>;
    }
    else {
        die "file not found: $opts->{file}\n" unless -f $opts->{file};
        require Path::Tiny;
        $opts->{sql} = Path::Tiny::path( $opts->{file} )->slurp_utf8;
    }
}
elsif ( not -t STDIN ) {
    local $/ = undef;
    $opts->{sql} = <>;
}
else {
    die OptArgs2::usage('App::sqltidy');
}

require SQL::Tidy;
my $sql = SQL::Tidy->new( indent => $opts->{indent} );
$sql->parse( $opts->{sql} );
my $output = ( $opts->{debug} ? $sql->tree2ast : '' ) . $sql->tree2sql;

# TODO
if ( $opts->{inplace} ) {
    Path::Tiny::path( $opts->{file} . '.tdy' )->spew_utf8($output);
}
else {
    require SQL::Tidy::Pager;
    local $ENV{'LESS'} = '-FXeR';
    my $pager = SQL::Tidy::Pager->new;
    $pager->open;
    print $output;
}

1;

__END__

=head1 NAME

sqltidy - format and indent SQL text

=head1 SYNOPSIS

    sqltidy FILE [OPTIONS...]

=head1 DESCRIPTION

The B<sqltidy> tool reformat SQL in an aesthetically pleasing way.  It
can be run stand-alone (passing a file as an argument) or can be run
in-place on code in your text editor.

If C<FILE> is passed as an argument to the script, the script will
non-destructively create a new, tidied version of the file, with the
extension .tdy appended to the original filename.

If a filename is not passed, then the script will read from STDIN and
output the tidied SQL to STDOUT.  This makes it suitable for in-place
edits in your favorite text editor.

=for comment
In this case, the C<--double-escape>
and C<--preserve-indent> options are enabled by default unless
an explicit C<--no-editor-mode> is used.


=head1 OPTIONS

=over

=item --help

Print a help message and exit.

=begin comment

=item --double-escape

Expect two escape characters (\\\\) instead of just one. This may be
needed if your sql is embedded in another language, which requires that
the escape character itself be escaped.

=item --preserve-indent

Preserve the indentation in the existing file.  This sets the
indentation to be the least-indented line of the SQL statement.

=item --editor-mode

Enable both --double-escape and --preserve-indent options, making it
suitable for being called from Perl in the same way as perltidy.
Enabled by default when invoked without a file (using STDIN).

=item --no-editor-mode

Don't invoke editor mode by default when calling sqltidy without a
file.

=end comment

=back

=head1 EXIT VALUE

This command exists with a value of 0 on success.

=head1 SEE ALSO

L<SQL::Tidy>(3pm) - Perl interface for formatting SQL

L<sqltidy-sqlite>(1) - Tidy an SQLite database schema directly

=head1 AUTHOR

Mark Lawrence E<lt>nomad@null.netE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright 2020-2021 Mark Lawrence <nomad@null.net>

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 3 of the License, or (at your
option) any later version.

